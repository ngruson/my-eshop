@using eShop.Catalog.Contracts.GetCatalogBrands
@using eShop.Catalog.Contracts.GetCatalogTypes
@using eShop.ServiceInvocation.CatalogApiClient
@inject ICatalogApiClient CatalogApiClient
@inject NavigationManager Nav

@if (catalogBrands is not null && catalogItemTypes is not null)
{
    <div class="catalog-search">
        <div class="catalog-search-header">
            <img role="presentation" src="icons/filters.svg" />
            Filters
        </div>
        <div class="catalog-search-types">
            <div class="catalog-search-group">
                <h3>Brand</h3>
                <div class="catalog-search-group-tags">
                    <a href="@BrandUri(null)"
                    class="catalog-search-tag @(BrandId == null ? "active " : "")">
                        All
                    </a>
                    @foreach (CatalogBrandDto brand in catalogBrands)
                    {
                        <a href="@BrandUri(brand.ObjectId)"
                        class="catalog-search-tag @(BrandId == brand.ObjectId ? "active " : "")">
                            @brand.Name
                        </a>
                    }
                </div>
            </div>
            <div class="catalog-search-group">
                <h3>Type</h3>

                <div class="catalog-search-group-tags">
                    <a href="@TypeUri(null)"
                    class="catalog-search-tag @(ItemTypeId == null ? "active " : "")">
                    All
                    </a>
                    @foreach (CatalogTypeDto itemType in catalogItemTypes)
                    {
                        <a href="@TypeUri(itemType.ObjectId)"
                        class="catalog-search-tag @(ItemTypeId == itemType.ObjectId ? "active " : "")">
                            @itemType.Name
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    IEnumerable<CatalogBrandDto>? catalogBrands;
    IEnumerable<CatalogTypeDto>? catalogItemTypes;
    [Parameter] public Guid? BrandId { get; set; }
    [Parameter] public Guid? ItemTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Task<CatalogBrandDto[]> brandsTask = CatalogApiClient.GetBrands();
        Task<CatalogTypeDto[]> itemTypesTask = CatalogApiClient.GetTypes();
        await Task.WhenAll(brandsTask, itemTypesTask);
        catalogBrands = brandsTask.Result;
        catalogItemTypes = itemTypesTask.Result;
    }

    private string BrandUri(Guid? brandId) => Nav.GetUriWithQueryParameters(new Dictionary<string, object?>()
    {
        { "page", null },
        { "brand", brandId },
    });

    private string TypeUri(Guid? typeId) => Nav.GetUriWithQueryParameters(new Dictionary<string, object?>()
    {
        { "page", null },
        { "type", typeId },
    });
}
