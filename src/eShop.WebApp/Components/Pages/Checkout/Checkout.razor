@page "/checkout"
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using IdentityModel
@using System.Security.Claims
@using eShop.Customer.Contracts
@using eShop.Customer.Contracts.GetCustomer
@inject BasketState Basket
@inject NavigationManager Nav
@inject ICustomerApi CustomerApi
@attribute [Authorize]

<PageTitle>Checkout | AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">Checkout</SectionContent>

<div class='checkout'>
    @if (editContext is not null)
    {
        <EditForm EditContext="@editContext" FormName="checkout" OnSubmit="@HandleSubmitAsync" Enhance>
            <DataAnnotationsValidator />
            <div class="form">
                <div class="form-section">
                    <h2>Shipping address</h2>
                    <label>
                        Address
                        <InputText @bind-Value="@Info.Street" />
                        <ValidationMessage For="@(() => Info.Street)" />
                    </label>
                    <div class="form-group">
                        <div class="form-group-item">
                            <label>
                                City
                                <InputText @bind-Value="@Info.City" />
                                <ValidationMessage For="@(() => Info.City)" />
                            </label>
                        </div>
                        <div class="form-group-item">
                            <label>
                                State
                                <InputText @bind-Value="@Info.State" />
                                <ValidationMessage For="@(() => Info.State)" />
                            </label>
                        </div>
                        <div class="form-group-item">
                            <label>
                                Zip code
                                <InputText @bind-Value="@Info.ZipCode" />
                                <ValidationMessage For="@(() => Info.ZipCode)" />
                            </label>
                        </div>
                    </div>
                    <div>
                        <label>
                            Country
                            <InputText @bind-Value="@Info.Country" />
                            <ValidationMessage For="@(() => Info.Country)" />
                        </label>
                    </div>
                </div>
                <div class="form-section">
                    <div class="form-buttons">
                        <a href="cart" class="button button-secondary"><img role="presentation" src="icons/arrow-left.svg" />Back to the shopping bag</a>
                        <button class="button button-primary" type="submit">Place order</button>
                    </div>
                </div>
            </div>
            <ValidationSummary />
        </EditForm>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private EditContext editContext = default!;
    private ValidationMessageStore extraMessages = default!;

    [SupplyParameterFromForm]
    public BasketCheckoutInfo Info { get; set; } = default!;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (Info is null)
        {
            await PopulateFormWithDefaultInfo();
        }

        editContext = new EditContext(Info!);
        extraMessages = new ValidationMessageStore(editContext);
    }

    private async Task PopulateFormWithDefaultInfo()
    {
        string firstName = ReadClaim(ClaimTypes.GivenName)!;
        string lastName = ReadClaim(ClaimTypes.Surname)!;
        string name = $"{firstName} {lastName}";

        CustomerDto customer = await CustomerApi.GetCustomer(name);

        Info = new BasketCheckoutInfo
        {
            Street = customer.Street,
            City = customer.City,
            State = customer.State,
            Country = customer.Country,
            ZipCode = customer.ZipCode,
            RequestId = Guid.NewGuid()
        };

        string? ReadClaim(string type)
            => HttpContext.User.Claims.FirstOrDefault(x => x.Type == type)?.Value;
    }

    private async Task HandleSubmitAsync()
    {
        await PerformCustomValidationAsync();

        if (editContext.Validate())
        {
            await HandleValidSubmitAsync();
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        Info.CardTypeId = 1;
        await Basket.CheckoutAsync(Info);
        Nav.NavigateTo("user/orders");
    }

    private async Task PerformCustomValidationAsync()
    {
        extraMessages.Clear();

        if ((await Basket.GetBasketItemsAsync()).Count == 0)
        {
            extraMessages.Add(new FieldIdentifier(Info, ""), "Your cart is empty");
        }
    }

    private static DateTime? ParseExpiryDate(string? monthYear)
        => DateTime.TryParseExact($"01/{monthYear}", "dd/MM/yy", null, DateTimeStyles.None, out var result) ? result.ToUniversalTime() : null;
}
