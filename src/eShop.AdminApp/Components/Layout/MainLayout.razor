@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<FluentLayout>
    <FluentHeader Class="tw-h-16">
        AdventureWorks
        <FluentSpacer />
        <FluentPersona ImageSize="40px"
                       Image="@(new Icons.Regular.Size48.Person().ToDataUri(size: "25px", color: "white"))" />
    </FluentHeader>
    <FluentStack Class="main tw-h-full" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="tw-ml-2.5">
            <div class="content">
                <ErrorBoundary>
                    <FluentMessageBarProvider Section="MESSAGES_TOP"/>
                    @Body
                </ErrorBoundary>
            </div>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>

<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

@code {
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private string GetCurrentUserInitials()
    {
        string name = user!.FindFirst(c => c.Type == JwtClaimTypes.Name)!.Value;
        return GetInitials(name);
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return string.Empty;

        IEnumerable<char> initials = fullName.Split(' ')
                               .Where(name => !string.IsNullOrWhiteSpace(name) && char.IsLetter(name[0]))
                               .Select(name => char.ToUpper(name[0]));

        return string.Concat(initials);
    }
}
