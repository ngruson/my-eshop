@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="tw-flex">
    <div>
        <NavMenu/>
    </div>
    <div class="tw-w-full"> 
        <div class="tw-flex tw-justify-between tw-py-2.5 tw-px-6 tw-bg-white tw-shadow">
            @* tw-shadow[0_2px_4px_rgba(0,0,20,.08),0_1px_2px_rgba(0,0,20,.08)] *@
            <FluentAnchor Href="" Class="tw-border-0">
                <FluentIcon Value="@(new Icons.Regular.Size20.ArrowCircleLeft())" />
            </FluentAnchor>
            <ul class="tw-flex tw-text-blue-300 tw-mr-3">
                <li>
                    <FluentPersona
                        ImageSize="50px"
                        Image="@(new Icons.Regular.Size48.Person().ToDataUri(size: "25px", color: "white"))" />
                </li>
                <li>
                    @* <FluentIcon Value="@(new Icons.Regular.Size20.Home())" OnClick="@(() => open = !open)" /> *@
                    @* <div class="[&>*]:border-0"> *@
                </li>
            </ul>
        </div>
        @Body
    </div>
    @* <header class="flex justify-between w-full bg-blue-900 text-white p-3">
        <h1 class="font-bold text-2xl"><i class="fa-solid fa-file-invoice-dollar"/> AdventureWorks</h1>
        <ul class="flex text-blue-300">
            <li class="mx-2 hover:text-blue-500"><a href="/">Home</a></li>
            <li class="mx-2 hover:text-blue-500"><a href="/Contact">Contact</a></li>
        </ul>
    </header>
    <div class="bg-gray-100 p-2 w-full h-[calc(100vh-95px)] overflow-auto">
        @Body
    </div>
    <footer class="text-center bg-black text-white">&copy; 2024 AdventureWorks</footer> *@
</div>

@* <div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div> *@

<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />

@code {
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private string GetCurrentUserInitials()
    {
        string name = user!.FindFirst(c => c.Type == JwtClaimTypes.Name)!.Value;
        return GetInitials(name);
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return string.Empty;

        var initials = fullName.Split(' ')
                               .Where(name => !string.IsNullOrWhiteSpace(name) && char.IsLetter(name[0]))
                               .Select(name => char.ToUpper(name[0]));

        return string.Concat(initials);
    }
}
