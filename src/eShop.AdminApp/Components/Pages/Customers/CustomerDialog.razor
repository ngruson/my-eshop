@using MediatR
@using eShop.AdminApp.Application.Commands.UpdateCustomer
@using eShop.AdminApp.Application.Queries.GetCustomers
@inject IMediator Mediator
@implements IDialogContentComponent<CustomerViewModel>

<FluentMessageBarProvider Section="MESSAGES_DIALOG" MaxMessageCount="1" />

<FluentStack Orientation="Orientation.Vertical">
    <div>
        <FluentLabel Weight="FontWeight.Bold">First Name</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.FirstName" Style="width:430px" Required Disabled />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">Last Name</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.LastName" Style="width:430px" Required Disabled />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">Street</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.Street" Style="width:430px" Required />
        <FluentValidationMessage For="@(() => Content.Street)" />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">City</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.City" Style="width:430px" Required />
        <FluentValidationMessage For="@(() => Content.City)" />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">State</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.State" Style="width:430px" Required />
        <FluentValidationMessage For="@(() => Content.State)" />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">Country</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.Country" Style="width:430px" Required />
        <FluentValidationMessage For="@(() => Content.Country)" />
    </div>
    <div>
        <FluentLabel Weight="FontWeight.Bold">Zip Code</FluentLabel>
        <FluentTextField Name="displayTitle" @bind-Value="Content.ZipCode" Style="width:430px" Required />
        <FluentValidationMessage For="@(() => Content.ZipCode)" />
    </div>
</FluentStack>

@code {
    [Parameter]
    public CustomerViewModel Content { get; set; } = default!;

    private async Task HandleValidSubmit()
    {
        await Mediator.Send(CreateCommand(Content));
    }

    private UpdateCustomerCommand CreateCommand(CustomerViewModel model)
    {
        return new UpdateCustomerCommand(
            new Customer.Contracts.UpdateCustomer.UpdateCustomerDto(
                model.FirstName,
                model.LastName,
                model.CardNumber,
                model.SecurityNumber,
                model.Expiration,
                model.CardHolderName,
                model.CardType,
                model.Street,
                model.City,
                model.State,
                model.Country,
                model.ZipCode
            )
        );
    }
}
