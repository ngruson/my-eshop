@using MediatR
@using eShop.AdminApp.Application.Commands.UpdateCustomer
@using eShop.AdminApp.Application.Queries.GetCustomers
@using eShop.MasterData.Contracts
@implements IDialogContentComponent<CustomerDialogContent>

<FluentMessageBarProvider Section="MESSAGES_DIALOG" MaxMessageCount="1" />

<EditForm EditContext="@editContext" style="margin:10px">
    <DataAnnotationsValidator />
    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="firstName" @bind-Value="Content.Model.FirstName" Label="First Name" Required Style="width:400px" />
            <FluentValidationMessage For="@(() => Content.Model.FirstName)" />
        </div>
        <div>
            <FluentTextField Name="lastName" @bind-Value="Content.Model.LastName" Label="Last Name" Required Style="width:400px" />
            <FluentValidationMessage For="@(() => Content.Model.LastName)" />
        </div>
        <div>
            <FluentTextField Name="street" @bind-Value="Content.Model.Street" Label="Street" Required Style="width:400px" />
            <FluentValidationMessage For="@(() => Content.Model.Street)" />
        </div>
        <div>
            <FluentTextField Name="city" @bind-Value="Content.Model.City" Label="City" Required Style="width:400px" />
            <FluentValidationMessage For="@(() => Content.Model.City)" />
        </div>
        <div>
            <FluentSelect Items=@GetCountryOptions()
                          Name="country"
                          Label="Country"
                          TOption="Option<string>"
                          OptionText="@(_ => _.Text)"
                          OptionValue="@(_ => _.Value)"
                          OptionSelected="@(i => i.Value == Content.Model.Country)"
                          Required
                          @bind-Value="Content.Model.Country"
                          Width="400px"
                          Height="250px" SelectedOptionChanged="CountryValueChanged" />
            <FluentValidationMessage For="@(() => Content.Model.Country)" />
        </div>
        <div>
            <FluentSelect Items=@GetStatesOptions()
                          Name="state"
                          Label="State"
                          Disabled="@(Content.Model.Country != "US")"
                          TOption="Option<string>"
                          OptionText="@(_ => _.Text)"
                          OptionValue="@(_ => _.Value)"
                          OptionSelected="@(i => i.Value == Content.Model.State)"
                          Required
                          @bind-Value="Content.Model.State"
                          Width="400px"
                          Height="250px" />
            <FluentValidationMessage For="@(() => Content.Model.State)" />
        </div>
        <div>
            <FluentTextField Name="zipCode" @bind-Value="Content.Model.ZipCode" Label="Zip Code" Style="width:400px" Required />
            <FluentValidationMessage For="@(() => Content.Model.ZipCode)" />
        </div>
    </FluentStack>
</EditForm>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Bottom">
        <FluentButton
                Title="@(Content.Model.NewCustomer ? "Add" : "Update")"
                Appearance="Appearance.Accent"
                      Disabled="@(!editContext.Validate())"
                OnClick="PrimaryActionButtonClicked">
            @(Content.Model.NewCustomer ? "Add" : "Update")
        </FluentButton>
        <FluentButton Title="Cancel" Appearance="Appearance.Neutral" OnClick="SecondaryActionButtonClicked">
            Cancel
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code {
    [Parameter]
    public CustomerDialogContent Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private EditContext editContext { get; set; } = null!;
    private ValidationMessageStore? messageStore;

    protected override void OnParametersSet()
    {
        editContext = new EditContext(Content.Model);
        messageStore = new(editContext);
    }

    private async Task PrimaryActionButtonClicked()
    {
        await Dialog!.CloseAsync(Content);
    }

    private async Task SecondaryActionButtonClicked()
    {
        await Dialog!.CancelAsync();
    }

    private List<Option<string>> GetCountryOptions()
    {
        return this.Content.Countries.Select(_ => new Option<string>
            {
                Text = _.Name,
                Value = _.Code
            }).ToList();
    }

    private List<Option<string>> GetStatesOptions()
    {
        if (Content.Model.Country != "US")
        {
            return new List<Option<string>>();
        }

        var options = this.Content.States.Select(_ => new Option<string>
            {
                Text = _.Name,
                Value = _.Code
            }).ToList();

        options.Insert(0, new Option<string> { Text = "Select a state", Value = "" });

        return options;
    }

    private void CountryValueChanged(Option<string> option)
    {
        if (option is null)
            return;

        if (option.Value != "US")
        {
            Content.Model.State = string.Empty;
        }
    }
}
