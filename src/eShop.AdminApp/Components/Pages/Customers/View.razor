@page "/customers"
@using MediatR
@using eShop.AdminApp.Application.Commands.CreateCustomer
@using eShop.AdminApp.Application.Commands.UpdateCustomer
@using eShop.AdminApp.Application.Queries.GetCustomers
@inject IMediator Mediator
@inject IDialogService DialogService

<PageTitle>Customers</PageTitle>

<div class="tw-container tw-p-8">
    <div class="tw-mb-4">
        <FluentToolbar>
            <FluentButton IconStart="@(new Icons.Regular.Size16.PersonAdd())" Appearance="Appearance.Accent" OnClick="AddCustomer">
                Add Customer
            </FluentButton>
        </FluentToolbar>
    </div>
    <div class="tw-border-b tw-border-b-solid tw-border-b-[#dfe3e8] tw-pb-4 tw-mb-4">
        <FluentLabel Class="tw-text-2xl tw-font-medium" Typo="Typography.H1">Customers</FluentLabel>
    </div>
    <div class="tw-mt-8 tw-mx-32">
        <FluentDataGrid TGridItem="CustomerViewModel" Items="@customers" ShowHover="true" OnRowClick="RowClicked">
            <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Street)" Sortable="true" />
            <PropertyColumn Property="@(p => p.City)" Sortable="true" />
            <PropertyColumn Property="@(p => p.State)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Country)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ZipCode)" Sortable="true" />
        </FluentDataGrid>
    </div>
</div>

@code {
    private IQueryable<CustomerViewModel>? customers;

    protected override async Task OnInitializedAsync()
    {
        await GetCustomers();
    }

    private async Task GetCustomers()
    {
        this.customers = (await Mediator.Send(new GetCustomersQuery()))
            .Value.AsQueryable();
    }

    private async Task AddCustomer()
    {
        DialogParameters parameters = new()
        {
            Title = "Add Customer",
            PrimaryAction = "Add",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        CustomerViewModel viewModel = new();
        viewModel.NewCustomer = true;

        IDialogReference dialog = await DialogService.ShowDialogAsync<CustomerDialog>(
            viewModel, parameters);
        DialogResult? result = await dialog.Result;

        if (result.Cancelled == false)
        {
            CreateCustomerCommand command = viewModel.MapToCreateCustomerCreateCommand();
            await Mediator.Send(command);

            await GetCustomers();
        }
    }

    private async Task RowClicked(FluentDataGridRow<CustomerViewModel> row)
    {
        if (row.Item is null)
        {
            return;
        }

        DialogParameters parameters = new()
            {
                Title = row.Item.FullName,
                PrimaryAction = "Update",
                PrimaryActionEnabled = true,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<CustomerDialog>(row.Item, parameters);
        DialogResult? result = await dialog.Result;

        if (result.Data is CustomerViewModel viewModel)
        {
            UpdateCustomerCommand command = viewModel.MapToUpdateCustomerCreateCommand();
            await Mediator.Send(command);
        }
    }
}
