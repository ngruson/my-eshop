@using MediatR
@using eShop.AdminApp.Application.Commands.Customer.CreateCustomer
@using eShop.AdminApp.Application.Commands.Customer.UpdateCustomer
@using eShop.AdminApp.Application.Queries.Customer.GetCustomer
@using eShop.MasterData.Contracts
@inject IMasterDataApi MasterDataApi
@inject IMediator Mediator
@inject NavigationManager Navigation

<h4>Card Details</h4>

@if (editContext is not null)
{
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        <FluentCard>
            <div>
                <FluentTextField Label="Card Number" Value="@Customer?.CardNumber" ReadOnly Appearance="@textFieldAppearance" />
            </div>
            <div>
                <FluentTextField Label="Expiration" Value="@Customer?.Expiration" ReadOnly Appearance="@textFieldAppearance" />
            </div>
            <div>
                <FluentTextField Label="Cardholder Name" Value="@Customer?.CardHolderName" ReadOnly Appearance="@textFieldAppearance" />
            </div>
            <div>
                <FluentTextField Label="Card Type" Value="@Customer?.CardType" ReadOnly Appearance="@textFieldAppearance" />
            </div>
        </FluentCard>
    </EditForm>
}
else
{
    <FluentProgressRing></FluentProgressRing>
    <FluentLabel>Loading...</FluentLabel>
}

@code {
    [Parameter]
    public CustomerViewModel? Customer { get; set; }

    private EditContext editContext { get; set; } = null!;
    private ValidationMessageStore? messageStore;

    private FluentInputAppearance textFieldAppearance = FluentInputAppearance.Filled;

    protected override void OnParametersSet()
    {
        if (Customer is not null)
        {
            editContext = new EditContext(Customer);
            messageStore = new(editContext);
        }
    }
}
