@page "/customers"
@using MediatR
@using eShop.AdminApp.Application.Commands.Customer.CreateCustomer
@using eShop.AdminApp.Application.Commands.Customer.UpdateCustomer
@using eShop.AdminApp.Application.Queries.Customer.GetCustomers
@using eShop.MasterData.Contracts
@inject IMediator Mediator
@inject IDialogService DialogService
@inject IMasterDataApi MasterDataApi
@inject NavigationManager Navigation

<PageTitle>Customers</PageTitle>

<div class="tw-container tw-p-8">
    <div class="tw-mb-4">
        <FluentToolbar>
            <FluentButton IconStart="@(new Icons.Regular.Size16.PersonAdd())" Appearance="Appearance.Accent" OnClick="AddCustomer">
                Add Customer
            </FluentButton>
        </FluentToolbar>
    </div>
    <div class="tw-border-b tw-border-b-solid tw-border-b-[#dfe3e8] tw-pb-4 tw-mb-4">        
        <h3 class="tw-text-2xl tw-font-medium">Customers</h3>
    </div>
    <div>
        <FluentDataGrid TGridItem="CustomerViewModel" Items="@customers" ShowHover="true" OnRowClick="RowClicked">
            <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Street)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ZipCode)" Sortable="true" />
            <PropertyColumn Property="@(p => p.City)" Sortable="true" />
            <PropertyColumn Property="@(p => p.State)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Country)" Sortable="true" />
            
        </FluentDataGrid>
    </div>
</div>

@code {
    private IQueryable<CustomerViewModel>? customers;
    private IEnumerable<CountryDto> countries = Array.Empty<CountryDto>();
    private IEnumerable<StateDto> states = Array.Empty<StateDto>();

    protected override async Task OnInitializedAsync()
    {
        this.countries = await MasterDataApi.GetCountries();
        this.states = await MasterDataApi.GetStates();
        await GetCustomers();
    }

    private async Task GetCustomers()
    {
        this.customers = (await Mediator.Send(new GetCustomersQuery()))
            .Value.AsQueryable();
    }

    private void AddCustomer()
    {
        Navigation.NavigateTo("/customer/new");
    }

    private void RowClicked(FluentDataGridRow<CustomerViewModel> row)
    {
        if (row.Item is null)
        {
            return;
        }

        Navigation.NavigateTo($"/customer/{row.Item.ObjectId}");
    }
}
